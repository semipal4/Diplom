#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	ТекстСобщения = ПроверкаДоговора(Договор); 
	Если СтрДлина(ТекстСобщения) > 1 Тогда
		//Сообщение = новый СообщениеПользователю;
		//Сообщение.Текст = ТекстСобщения;
		//Сообщение.УстановитьДанные(ЭтотОбъект); //привязываем сообщение к текущему документу
		//Сообщение.Сообщить(); 
		ОбщегоНазначения.СообщитьПользователю(ТекстСобщения);
		Отказ = Истина;
	КонецЕсли;
	
	// 1.9. Реализуйте обработку проведения по регистру накопления. Сумма к оплате должна
	// рассчитываться исходя из ставки часа, указанной в договоре
	// Регистр накопления Приход  
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ДоговорыКонтрагентов.ВКМ_СтоимостьЧасаРаботы КАК ВКМ_СтоимостьЧасаРаботы
	               |ИЗ
	               |	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	               |ГДЕ
	               |	ДоговорыКонтрагентов.Ссылка = &ДоговорСсылка";
	//Запрос.УстановитьПараметр("ДоговорСсылка", Договор.Ссылка);
	Запрос.УстановитьПараметр("ДоговорСсылка", Договор);
	Выборка = Запрос.Выполнить().Выбрать();
	//ВыборкаТЗ = Запрос.Выполнить().Выгрузить();    
	Договор_СтоимостьЧасаРаботы = 0 ;
	Пока Выборка.Следующий() Цикл  
		Договор_СтоимостьЧасаРаботы	= Выборка.ВКМ_СтоимостьЧасаРаботы;
	КонецЦикла;
	
	Движения.ВКМ_ВыполненныеКлиентуРаботы.Записывать = Истина;
	Движение = Движения.ВКМ_ВыполненныеКлиентуРаботы.Добавить();
	Движение.ВидДвижения = ВидДвиженияНакопления.Приход;   
	Движение.Договор = Договор;
	Движение.Клиент = Клиент;
	ЧасыКОплатеКлиентуИтог = ВыполненныеРаботы.Итог("ЧасыКОплатеКлиенту");
	Движение.КоличествоЧасов = ЧасыКОплатеКлиентуИтог;
	Движение.Период = ДатаПроведенияРабот;
	Движение.Регистратор = Ссылка;
	//Движение.СуммаКОплате = Договор.ВКМ_СтоимостьЧасаРаботы*ЧасыКОплатеКлиентуИтог;  
	Движение.СуммаКОплате = Договор_СтоимостьЧасаРаботы*ЧасыКОплатеКлиентуИтог;
	
	//2.5. Реализуйте в документе ОбслуживаниеКлиента алгоритм для формирования движений по регистру ВыполненныеСотрудникомРаботы.
	//Если на дату документа специалисту не установлен процент оплаты от работ, то документ не должен проводится. 
	//Необходимо учитывать, что может быть установлен нулевой процент, в этом случае документ должен проводится.
	//СуммаКОплате рассчитывается по формуе: ЧасовКОплатеКлиенту * СтавкаЧасаКлиента * ПроцентОтРабот / 100
	Запрос = Новый Запрос; 
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВКМ_УсловияОплатыСотрудниковСрезПоследних.ПроцентОтРабот КАК ПроцентОтРабот
	               |ИЗ
	               |	РегистрСведений.ВКМ_УсловияОплатыСотрудников.СрезПоследних(&Дата, Сотрудник = &Сотрудник) КАК ВКМ_УсловияОплатыСотрудниковСрезПоследних";
	
	Запрос.УстановитьПараметр("Сотрудник", Специалист); 
	Запрос.УстановитьПараметр("Дата", ДатаПроведенияРабот); 

	//ВыборкаТЗ = Запрос.Выполнить().Выгрузить();	
	Выборка   = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() = 0 Тогда
		ТекстСобщения = СтрШаблон("Для сотрудника %1 не заполнены Условия оплаты", Специалист);
		ОбщегоНазначения.СообщитьПользователю(ТекстСобщения);
		Отказ = Истина; 
	КонецЕсли;

    Пока Выборка.Следующий() Цикл  //Одна запись со специалистом
		Движения.ВКМ_ВыполненныеСотрудникомРаботы.Записывать = Истина;
		Движение = Движения.ВКМ_ВыполненныеСотрудникомРаботы.Добавить();
		Движение.ВидДвижения = ВидДвиженияНакопления.Приход;   
		Движение.Период = ДатаПроведенияРабот;
		Движение.Регистратор = Ссылка;
		Движение.Сотрудник = Специалист;
			ЧасовКОплатеКлиенту = ВыполненныеРаботы.Итог("ЧасыКОплатеКлиенту");
			//СтавкаЧасаКлиента = Договор.ВКМ_СтоимостьЧасаРаботы; 
			СтавкаЧасаКлиента = Договор_СтоимостьЧасаРаботы; 
			ПроцентОтРабот = Выборка.ПроцентОтРабот; 
		Движение.ЧасовКОплате = ЧасовКОплатеКлиенту;
		Движение.СуммаКОплате = Окр(ЧасовКОплатеКлиенту * СтавкаЧасаКлиента * ПроцентОтРабот / 100,2);
	КонецЦикла;

	
	
КонецПроцедуры   

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	// 14. При записи документа Обслуживание клиента, если документ записывается первый раз
	// или если дата, время или специалист изменились, добавьте в справочник сообщение с
	// текстом, описывающим изменения.	
	
	Если ОбменДанными.Загрузка Тогда 
		Возврат; 
	КонецЕсли;
	
	Если Дата <> ДатаПроведенияРабот Тогда
		//для тестового варианта  дата документа приравнивается к дате работ для удобства поиска инфо
		Дата = ДатаПроведенияРабот;
	КонецЕсли;	
		

	СообщениеБоту = Неопределено;
	
	Если ЭтоНовый() Тогда 
		СообщениеБоту = "НОВЫЙ - ";
	Иначе
		Запрос = Новый Запрос; 
		Запрос.Текст = "ВЫБРАТЬ
		               |	ВКМ_ОбслуживаниеКлиента.Ссылка КАК Ссылка,
		               |	ВКМ_ОбслуживаниеКлиента.ДатаПроведенияРабот КАК ДатаПроведенияРабот,
		               |	ВКМ_ОбслуживаниеКлиента.ВремяНачалаРаботПлан КАК ВремяНачалаРаботПлан,
		               |	ВКМ_ОбслуживаниеКлиента.ВремяОкончанияРаботПлан КАК ВремяОкончанияРаботПлан,
		               |	ВКМ_ОбслуживаниеКлиента.Проведен КАК Проведен,
		               |	ВКМ_ОбслуживаниеКлиента.Специалист КАК Специалист
		               |ИЗ
		               |	Документ.ВКМ_ОбслуживаниеКлиента КАК ВКМ_ОбслуживаниеКлиента
		               |ГДЕ
		               |	ВКМ_ОбслуживаниеКлиента.Ссылка = &Ссылка";

		Запрос.УстановитьПараметр("Ссылка", Ссылка); 

		//ВыборкаТЗ = Запрос.Выполнить().Выгрузить();	
		Выборка   = Запрос.Выполнить().Выбрать();	
		
		Пока Выборка.Следующий() Цикл
			Если ДатаПроведенияРабот <> Выборка.ДатаПроведенияРабот 
				Или ВремяНачалаРаботПлан <> Выборка.ВремяНачалаРаботПлан 
				Или	ВремяОкончанияРаботПлан <> Выборка.ВремяОкончанияРаботПлан 
				Или Специалист <> Выборка.Специалист Тогда
				//Если Не (СообщениеБоту = "НОВЫЙ - ") Тогда
					СообщениеБоту = "Изм. - ";
				//КонецЕсли;
			КонецЕсли;
  		КонецЦикла; 
	КонецЕсли; 
	
	Если СтрДлина(СообщениеБоту) > 1 Тогда
		ЗаполнениеСправочникаВКМ_УведомленияТелеграмБоту(СообщениеБоту);
		СообщениеБоту = Неопределено;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти        

#Область СлужебныеПроцедурыИФункции     

Функция ПроверкаДоговора(Договор)
	// 8. Реализуйте проверку при проведении документа, что выбран договор с типом
	// абонентская плата и что дата документа лежит между датой начала и датой окончания
	// действия договора

	ТекстСобщения = "";

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ДоговорыКонтрагентов.ВидДоговора КАК ВидДоговора,
	               |	ДоговорыКонтрагентов.ВКМ_ПериодДействияДоговораНачало КАК ВКМ_ПериодДействияДоговораНачало,
	               |	ДоговорыКонтрагентов.ВКМ_ПериодДействияДоговораОкончание КАК ВКМ_ПериодДействияДоговораОкончание
	               |ИЗ
	               |	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	               |ГДЕ
	               |	ДоговорыКонтрагентов.Ссылка = &ДоговорСсылка";
	//Запрос.УстановитьПараметр("ДоговорСсылка", Договор.Ссылка);
	Запрос.УстановитьПараметр("ДоговорСсылка", Договор);
	Выборка = Запрос.Выполнить().Выбрать();
	//ВыборкаТЗ = Запрос.Выполнить().Выгрузить();
    Договор_ВКМ_ПериодДействияДоговораНачало = 0;
	Договор_ВКМ_ПериодДействияДоговораОкончание = 0; 
	Договор_ВидДоговора = Неопределено;
	Пока Выборка.Следующий() Цикл 
		Договор_ВидДоговора = Выборка.ВидДоговора; 
		Договор_ВКМ_ПериодДействияДоговораНачало = Выборка.ВКМ_ПериодДействияДоговораНачало;
		Договор_ВКМ_ПериодДействияДоговораОкончание = Выборка.ВКМ_ПериодДействияДоговораОкончание;
	КонецЦикла;
	
	
	//Если Договор.ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.АбоненскоеОбслуживание Тогда
	//	ТекстСобщения = ТекстСобщения + СтрШаблон("Неверно выбран вид договора: должен быть вид Абонентская плата. ");
	//иначе
	//	Если Дата < Договор.ВКМ_ПериодДействияДоговораНачало Тогда 
	//		ТекстСобщения = ТекстСобщения + СтрШаблон("Дата документа %1 не м.б. меньше начала периода обслуживания по договору %2. ",
	//		Дата,Договор.ВКМ_ПериодДействияДоговораНачало);
	//	КонецЕсли;
	//	
	//	Если Дата > Договор.ВКМ_ПериодДействияДоговораОкончание Тогда
	//		ТекстСобщения = ТекстСобщения + СтрШаблон("Дата документа %1 не м.б. позже окончания периода обслуживания по договору %2.",
	//		Дата,Договор.ВКМ_ПериодДействияДоговораОкончание);
	//	КонецЕсли;
	//КонецЕсли;  
	
	Если Договор_ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.АбоненскоеОбслуживание Тогда
		ТекстСобщения = ТекстСобщения + СтрШаблон("Неверно выбран вид договора: должен быть вид Абонентская плата. ");
	иначе
		Если Дата < Договор_ВКМ_ПериодДействияДоговораНачало Тогда 
			ТекстСобщения = ТекстСобщения + СтрШаблон("Дата документа %1 не м.б. меньше начала периода обслуживания по договору %2. ",
			Дата,Договор_ВКМ_ПериодДействияДоговораНачало);
		КонецЕсли;
		
		Если Дата > Договор_ВКМ_ПериодДействияДоговораОкончание Тогда
			ТекстСобщения = ТекстСобщения + СтрШаблон("Дата документа %1 не м.б. позже окончания периода обслуживания по договору %2.",
			Дата,Договор_ВКМ_ПериодДействияДоговораОкончание);
		КонецЕсли;
	КонецЕсли;  
	
	Возврат ТекстСобщения;
КонецФункции  

Процедура ЗаполнениеСправочникаВКМ_УведомленияТелеграмБоту(Сообщение)
		НовыйЭлементСправочника = Справочники.ВКМ_УведомленияТелеграмБоту.СоздатьЭлемент();
		Стр1 = СтрШаблон("%1 вызван к клиенту %2 на %3 в период [%4 - %5]",
							Специалист, 
							Клиент, 
							Формат(ДатаПроведенияРабот,"ДФ=dd.MM.yyyy"),
							Формат(ВремяНачалаРаботПлан,"ДФ=ЧЧ:мм"), 
							Формат(ВремяОкончанияРаботПлан,"ДФ=ЧЧ:мм"));
		
		НовыйЭлементСправочника.ТекстСообщения = Сообщение + Стр1; 
		НовыйЭлементСправочника.Записать();  
        //СообщениеБоту = Неопределено;
        Сообщение = Неопределено;

КонецПроцедуры

#КонецОбласти

#КонецЕсли



